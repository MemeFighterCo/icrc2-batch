type TransferFromError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientAllowance: record {allowance: nat;};
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferFromArgs = 
 record {
   amount: nat;
   created_at_time: opt nat64;
   fee: opt nat;
   from: Account;
   memo: opt blob;
   spender_subaccount: opt blob;
   to: Account;
 };
type ApproveError = 
 variant {
   AllowanceChanged: record {current_allowance: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   Expired: record {ledger_time: nat64;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type ApproveArgs = 
 record {
   amount: nat;
   created_at_time: opt nat64;
   expected_allowance: opt nat;
   expires_at: opt nat64;
   fee: opt nat;
   from_subaccount: opt blob;
   memo: opt blob;
   spender: Account;
 };
type AllowanceArgs = 
 record {
   account: Account;
   spender: Account;
 };
type Allowance = 
 record {
   allowance: nat;
   expires_at: opt nat64;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
service : {
  icrc2_allowance: (AllowanceArgs) -> (Allowance) query;
  icrc2_approve: (ApproveArgs) -> (variant {
                                     Err: ApproveError;
                                     Ok: nat;
                                   });
  icrc2_transfer_from: (TransferFromArgs) ->
   (variant {
      Err: TransferFromError;
      Ok: nat;
    });
}
